// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array free;

    /** Initializes the class. */
    function void init() {
        let free = 2048;
        let free[0] = 14336;
        let free[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return address[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let address[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array p;
        var int res;
        let p = free;
        let size = size + 1;
        while (~(p = null)) {
            if (~(p[0] < (size + 2))) {
                let res = p + p[0] - size;
                let res[0] = size;
                let p[0] = p[0] - size;
                return res + 1;
            }
            let p = p[1];
        }
        do Sys.error(1);
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int p;
        let p = free;
        while (~(p[1] = null)) {
            let p = p[1];
        }
        let o = o - 1;
        let o[1] = null;
        let p[1] = o;
        return;
    }    
}
